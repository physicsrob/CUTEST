; AINP CONTINUES HERE (IT COULD HAVE BEEN A "JMP" THOUGH)
	PUSH	H	;SAVE HL FM ENTRY
	LXI	H,ITAB
;
;    THIS ROUTINE PROCESSES THE I/O REQUESTS
;
IOPRC:	ANI	3	;KEEP REGISTER "A" TO FOUR VALUES
	RLC		;COMPUTE ENTRY ADDRESS
	ADD	L
	MOV	L,A	;WE HAVE ADDRESS
	JMP	DISPT	;DISPATCH TO IT
;
;
OUTPR:	EQU	$	;PROCESS OUTPUT REQUESTS
	PUSH	H	;SAVE REGS
	LXI	H,OTAB	;POINT TO OUTPUT DISPATCH TABLE
	JMP	IOPRC	;DISPATCH FOR PROPER PSUEDO PORT
;
;
;
; CUTER SYSTEM I/O ROUTINES
;
;
;    THIS ROUTINE IS A MODEL OF ALL INPUT ROUTINES WITHIN
;  CUTER.  THE FIRST ROUTINE "KREA1" PERFORMS THE INPUT
;  FROM THE STANDARD KEYBOARD ON PARALLEL PORT 3.
;  ALL STANDARD INPUT DRIVERS RETURN EITHER THE CHARACTER
;  WITH A NON-ZERO FLAG, OR JUST A ZERO FLAG INDICATING
;  THAT NO CHARACTER IS AVAILABLE YET.  IT WILL BE THE
;  RESPONSIBILITY OF THE USER TO LOOP WAITING FOR A
;  CHARACTER, OR TO USE THE INPUT AS A STATUS REQUEST.
;  WHEN A CHARACTER IS AVAILABLE, IT IS RETURNED IN REG A.
;
;  THE FOLLOWING KEYBOARD ROUTINE MAY BE USED AS A SAMPLE
;  OF HOW TO WRITE A USER INPUT ROUTINE.
;
;         KEYBOARD INPUT ROUTINE
;
; KREA1:	EQU	$	;KEYBOARD READ ROUTINE
; 	INPUT_ROUTINE KDATA, KSTAT, KDR, TRUE	
; ;
; ;
; ;   SERIAL INPUT ROUTINE
; ;
; SREA1:	EQU	$	;SERIAL INPUT ROUTINE
; 	INPUT_ROUTINE SDATA, SSTAT, SDR, FALSE	

	
DEFINE_INPUT	MACRO i
	IFDEF PSEUDO_i_DATA_PORT
IN_i:	   EQU $
	   INPUT_ROUTINE PSEUDO_i_DATA_PORT, PSEUDO_i_STATUS_PORT, PSEUDO_i_STATUS_READ_MASK, PSEUDO_i_STATUS_READ_INVERT
	ENDIF
	ENDM

	DEFINE_INPUT 0
	DEFINE_INPUT 1
	DEFINE_INPUT 2
	DEFINE_INPUT 3

;
;   SERIAL DATA OUTPUT
;
SEROT:	EQU	$	;SERIAL OUTPUT ROUTINE
	OUT_ROUTINE SDATA, SSTAT, STBE


; 	IFDEF PSEUDO0_DATA_PORT
; 	   IFDEF PSEUDO0_OUTPUT_VDM
; OUT0:	      EQU VDM01
; 	   ELSE
; OUT0:	      EQU $
; 	      OUT_ROUTINE PSEUDO0_DATA_PORT, PSEUDO0_STATUS_PORT, PSEUDO0_STATUS_WRITE_MASK
; 	   ENDIF
; 	ENDIF

; PSEUDO0_OUTPUT_VDM:                EQU TRUE
; PSEUDO0_DATA_PORT:                 EQU 10h
; PSEUDO0_STATUS_PORT:               EQU 11h
; PSEUDO0_STATUS_READ_MASK:          EQU 1
; PSEUDO0_STATUS_READ_INVERT:        EQU TRUE


; PSEUDO1_DATA_PORT:                 EQU 10h
; PSEUDO1_STATUS_PORT:               EQU 11h
; PSEUDO1_STATUS_READ_MASK:          EQU 1
; PSEUDO1_STATUS_WRITE_MASK:         EQU 2
; PSEUDO1_STATUS_WRITE_INVERT:       EQU FALSE

; ADD_PSUPORT	MACRO	IDX, DATAPORT, STATUSPORT, STATUSFLAG, INVERTSTATUS
; port_IDX	label $
; 		INPUT_ROUTINE DATAPORT, STATUSPORT, STATUSFLAG, INVERTSTATUS
; 		ENDM
	
; 	ADD_PSUPORT 1, KDATA, KSTAT, KDR, TRUE	
; 	ADD_PSUPORT 2, KDATA, KSTAT, KDR, TRUE	

; 	IFDEF port_1
; 	jz port_1
; 	ENDIF
; 	IFDEF port_2
; 	jz port_2
; 	ENDIF
; 	IFDEF port_3
; 	jz port_3
; 	ENDIF
; 	IFDEF port_4
; 	jz port_3
; 	ENDIF


