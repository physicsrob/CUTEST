;
;
;               VIDEO DRIVER COMMAND TABLE
;
;     THIS TABLE DEFINES THE CHARACTERS FOR SPECIAL
;  PROCESSING. IF THE CHARACTER IS NOT IN THE TABLE IT
;  GOES TO THE SCREEN.
;
TBL:	DB	CLEAR	;SCREEN
	DW	ERASE_SCREEN
	DB	UP	;CURSOR
	DW	PUP
	DB	DOWN	;"
	DW	PDOWN
	DB	LEFT	;"
	DW	PLEFT
	DB	RIGHT	;"
	DW	PRIT
	DB	HOME	;"
	DW	PHOME
	DB	CR	;CARRIAGE RETURN
	DW	PCR
	DB	LF	;LINE FEED
	DW	PLF
	DB	BACKS	;BACK SPACE
	DW	PBACK
	DB	ESC	;ESCAPE KEY
	DW	PESC
	DB	0	;END OF TABLE
;
;
;
;                  VIDEO DISPLAY ROUTINES
;
;
;  THESE ROUTINES ALLOW FOR STANDARD VIDEO TERMINAL
;  OPERATIONS.  ON ENTRY, THE CHARACTER FOR OUTPUT IS IN
;  REGISTER B AND ALL REGISTERS ARE UNALTERED ON RETURN.
;
;
;
VDM01:	EQU	$	;VDM OUTPUT DRIVER
	PUSH	H	;SAVE HL
	PUSH	D	;SAVE DE
	PUSH	B
;
;  PROCESS ESC SEQUENCE IF ANY
;
	LDA	ESCFL	;GET ESCAPE FLAG
	ORA	A
	JNZ	ESCS	;IF NON ZERO GO PROCESS THE REST OF THE SEQUENCE
;
	MOV	A,B	;GET CHAR
	ANI	7FH	;CLR HI BIT IN CASE
	MOV	B,A	;USE CHAR STRIPPED OF HI BIT FOR COMPATABILITY
	JZ	GOBK	;MAKE A QUICK EXIT FOR A NULL
;
	LXI	H,TBL
	CALL	TSRCH	;GO PROCESS
;
GOBACK:	EQU	$	;RESET CURSOR AND DELAY
	CALL	VDADD	;GET SCRN ADDR
	MOV	A,M	;GET CHAR
	ORI	80H	;INVERSE VIDEO
	MOV	M,A	;CURSOR IS NOW THERE
	LHLD	SPEED-1	;GET DELAY SPEED
	INR	L	;MAKE IT DEFINITELY NON-ZERO
	XRA	A	;DELAY ENDS WHEN H=ZERO
TIMER:	DCX	H	;LOOP FOR DELAY AMNT
	CMP	H	;IS IT DONE YET
	JNZ	TIMER	;NO--KEEP DELAYING
GOBK:	POP	B
	POP	D	;RESTORE ALL REGISTERS
	POP	H
	RET		;EXIT FROM VDMOT
;
;
NEXT:	EQU	$	;GO TO NEXT CHR
	INX	H
	INX	H
;
;  THIS ROUTINE SEARCHES FOR A MATCH OF THE CHAR IN "B"
;  TO THE CHAR IN THE TBL POINTED TO BY HL.
;
TSRCH:	MOV	A,M	;GET CHR FROM TABLE
	ORA	A	;SEE IF END OF TBL
	JZ	CHAR	;ZERO IS THE LAST
	CMP	B	;TEST THE CHR
	INX	H	;POINT FORWARD
	JNZ	NEXT
	PUSH	H	;FOUND ONE...SAVE ADDRESS
	CALL	CREM	;REMOVE CURSOR
	XTHL		;RESTORE ADDR OF CHAR ENTRY IN TBL
	JMP	DISPT	;DISPATCH FOR CURSOR CONTROL
;
;
CHAR:	EQU	$	;WE HAVE A CHAR
	MOV	A,B	;GET CHARACTER
	CPI	7FH	;IS IT A DEL?
	RZ		;GO BACK IF SO
;
;
;
OCHAR:	CALL	VDADD	;GET SCREEN ADDRESS
	MOV	M,B	;PUT CHR ON SCREEN
	LDA	NCHAR	;GET CHARACTER POSITION
	CPI	63	;END OF LINE?
	JC	OK
	LDA	LINE
	CPI	15	;END OF SCREEN?
	JNZ	OK
;
;   END OF SCREEN...ROLL UP ONE LINE
;
SCROLL:	XRA	A
	STA	NCHAR	;BACK TO FIRST CHAR POSITION
SROL:	MOV	C,A
	CALL	VDAD	;CALCULATE LINE TO BE BLANKED
	XRA	A
	CALL	CLIN1	;CLEAR IT
	LDA	BOT
	INR	A
	ANI	0FH
	JMP	ERAS3
;
;   INCREMENT LINE COUNTER IF NECESSARY
;
OK:	LDA	NCHAR	;GET CHR POSITION
	INR	A
	ANI	3FH	;MOD 64
	STA	NCHAR	;STORE THE NEW
	RNZ		;MORE CHARS THIS LINE
PDOWN:	EQU	$	;MOVE CURSOR DOWN ONE LINE
	LDA	LINE	;GET THE LINE COUNT
	INR	A
CURSC:	ANI	0FH	;MOD 15 INCREMENT
CUR:	STA	LINE	;STORE THE NEW
	RET
;
;    ERASE SCREEN
;
ERASE_SCREEN:	LXI	H,VDM_MEM	;POINT TO SCREEN
	MVI	M,80H+' '  ;THIS IS THE CURSOR
	INX	H	;NEXT CHAR

	; Loop to clear the screen
-:	MVI	M,' '	;BLANK IT OUT
	INX	H	;NEXT SCRN LOC
	MOV	A,H	;SEE IF DONE
	CPI	0D0H	;DID IT GO ABOVE VDM
	JC	-	;NO--MORE
	; Set carry true, we use this to keep PHOME
	; from returning.
	STC		;SAY WE WANT TO DROP THRU TO ERAS3
;
PHOME:	EQU	$	;RESET CURSOR TO HOME
	MVI	A,0	;CLEAR, LEAVE CARRY AS IS
	STA	LINE	;ZERO LINE
	STA	NCHAR	;LEFT SIDE OF SCREEN
	; If carry flag isn't set, this was a direct call to PHOME
	; so return
	RNC		;THIS IS JUST A HOME OPERATION
;
ERAS3:	OUT	VDM_STAT_PORT	;RESET SCROLL PARAMETERS
	STA	BOT	;BEGINNING OF TEXT OFFSET
	RET
;
;
CLIN2:	EQU	$	;HERE TO SEE IF VDM OUTPUT
	LDA	OPORT	;GET CRNT OUTPUT PORT
	ORA	A
	RNZ		;NOT VDM--DONE THEN
CLINE:	CALL	VDADD	;GET CURRENT SCREEN ADDRESS
	LDA	NCHAR	;CURRENT CURSOR POSITION
CLIN1:	CPI	64	;NO MORE THAN 63
	RNC		;ALL DONE
	MVI	M,' '	;ALL SPACED OUT
	INX	H
	INR	A
	JMP	CLIN1	;LOOP TO END OF LINE
;
;
;  ROUTINE TO MOVE THE CURSOR UP ONE LINE
;
PUP:	LDA	LINE	;GET LINE COUNT
	DCR	A
	JMP	CURSC	;MERGE
;
;  MOVE CURSOR LEFT ONE POSITION
;
PLEFT:	LDA	NCHAR
	DCR	A
PCUR:	EQU	$	;TAKE CARE OF CURSOR SAME LINE
	ANI	03FH	;LET CURSOR WRAP AROUND
	STA	NCHAR	;UPDATED CURSOR
	RET
;
;     CURSOR RIGHT ONE POSITION
;
PRIT:	LDA	NCHAR
	INR	A
	JMP	PCUR
;
;   ROUTINE TO CALCULATE SCREEN ADDRESS
;
;   ENTRY AT:    RETURNS:
;
;         VDADD  CURRENT SCREEN ADDRESS
;         VDAD2  ADDRESS OF CURRENT LINE, CHAR 'C'
;         VDAD   LINE 'A', CHARACTER POSITION 'C'

VDADD:	LDA	NCHAR	;GET CHARACTER POSITION
	MOV	C,A	;'C' KEEPS IT
VDAD2:	LDA	LINE	;LINE POSITION
VDAD:	MOV	L,A	;INTO 'L'
	LDA	BOT	;GET TEXT OFFSET
	ADD	L	;ADD IT TO THE LINE POSITION
	RRC		;TIMES TWO
	RRC		;MAKES FOUR
	MOV	L,A	;L HAS IT
	ANI	3	;MOD THREE FOR LATER
	ADI	VDM_MEM >> 8	;LOW SCREEN OFFSET
	MOV	H,A	;NOW H IS DONE
	MOV	A,L	;TWIST L'S ARM
	ANI	0C0H
	ADD	C
	MOV	L,A
	RET		;H & L ARE NOW PERVERTED
;
;    ROUTINE TO REMOVE CURSOR
;
CREM:	CALL	VDADD	;GET CURRENT SCREEN ADDRESS
	MOV	A,M
	ANI	7FH	;STRIP OFF THE CURSOR
	MOV	M,A
	RET
;
;     ROUTINE TO BACKSPACE
;
PBACK:	CALL	PLEFT
	CALL	VDADD	;GET SCREEN ADDRESS
	MVI	M,' '	;PUT A BLANK THERE
	RET
;
;     ROUTINE TO PROCESS A CARRIAGE RETURN
;
PCR:	CALL	CLINE	;CLEAR FROM CURRENT CURSOR TO END OF LINE
;  NOTE THAT A COMES BACK=64 WHICH WILL BE CLEARED AT PCUR
	JMP	PCUR	;AND STORE THE NEW VALUE
;
;   ROUTINE TO PROCESS LINEFEED
;
PLF:	LDA	LINE	;GET LINE COUNT
	INR	A	;NEXT LINE
	ANI	15	;SEE IF IT WRAPPED AROUND
	JNZ	CUR	;IT DID NOT--NO SCROLL
;
	JMP	SROL	;SCROLL ONE LINE--CURSOR SOME POSITION
;
;     SET ESCAPE PROCESS FLAG
;
PESC:	MVI	A, 0FFH
	STA	ESCFL	;SET FLAG
	RET
;
;       PROCESS ESCAPE SEQUENCE
;
ESCS:	CALL	CREM	;REMOVE CURSOR
	CALL	ESCSP	;PROCESS THE CHARACTER
	JMP	GOBACK
;
ESCSP:	LDA	ESCFL	;GET ESCAPE FLAG
	CPI	0FFH	;TEST FLAG
	JZ	SECOND
;
;  PROCESS THIRD CHR OF ESC SEQUENCE
;
	LXI	H,ESCFL
	MVI	M,0
	CPI	2
	JC	SETX	;SET X
	JZ	SETY	;SET Y
	CPI	8	;SPECIAL SET SPEED
	JZ	STSPD	;YES--SET THE SPEED WITH IT THEN
	CPI	9
	JC	OCHAR	;PUT IT ON THE SCREEN
	RNZ
;
;  TAB ABSOLUTE TO VALUE IN REG B
;
SETX:	MOV	A,B
	JMP	PCUR
;
;  SET CURSOR TO LINE "B"
;
SETY:	MOV	A,B
	JMP	CURSC
;
;
;   PROCESS SECOND CHR OF ESC SEQUENCE
;
SECOND:	MOV	A,B
	CPI	3
	JZ	CURET
	CPI	4
	JNZ	ARET2
;
ARET:	MOV	B,H
	MOV	C,L	;PRESENT SCREEN ADDRESS TO BC FOR RETURN
ARET1:	POP	H	;RETURN ADDRESS
	POP	D	;OLD B
	PUSH	B
	PUSH	H
	XRA	A
ARET2:	STA	ESCFL
	RET
;
;
;     RETURN PRESENT SCREEN PARAMETERS IN BC
;
CURET:	LXI	H,NCHAR
	MOV	B,M	;CHARACTER POSITION
	INX	H
	MOV	C,M	;LINE POSITION
	JMP	ARET1

